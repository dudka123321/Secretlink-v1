import re
import base64
import argparse
import requests
import binascii
import os
from urllib.parse import urljoin, urlparse
from concurrent.futures import ThreadPoolExecutor, as_completed

# ===============================
# üìå –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –∏ –ø—É—Ç–µ–π –≤ JS –∫–æ–¥–µ
# ===============================
pattern = re.compile(
    r"""(?:"|')((?:[a-zA-Z]{1,10}://|//)[^"'\s]{1,}
    |(?:/|\.\./|\./)[^"'\s<>]{1,}
    |[a-zA-Z0-9_\-]+(?:\.[a-zA-Z]{2,})(?:/[^"'\s]*)?)["']""",
    re.VERBOSE
)

# ===============================
# üìå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
# ===============================
SECRET_KEYWORDS = [
    "api_key", "apikey", "api-key", "secret", "token", "auth", "password",
    "passwd", "pwd", "admin", "access_token", "auth_token", "client_secret",
    "private_key", "jwt", "sessionid", "cookie", "secret_key"
]

# ===============================
# üìå –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL (–¥–æ–±–∞–≤–ª—è–µ—Ç https:// –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
# ===============================
def normalize_url(url):
    if not url.startswith(("http://", "https://")):
        return "https://" + url
    return url

# ===============================
# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ JS-–∫–æ–¥–∞ —Å —Å–∞–π—Ç–∞ –∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞
# ===============================
def get_js_content(source):
    if not source.startswith("http") and ("/" in source or "." in source):
        source = "https://" + source

    if source.startswith("http"):
        resp = requests.get(source)
        resp.raise_for_status()
        return resp.text
    else:
        with open(source, "r", encoding="utf-8", errors="ignore") as f:
            return f.read()

# ===============================
# üìå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ (—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤)
# ===============================
def extract_endpoints(js_code, base_url=None):
    matches = re.findall(pattern, js_code)
    results = set()
    for match in matches:
        if base_url:
            results.add(urljoin(base_url, match))
        else:
            results.add(match)
    return results

# ===============================
# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL –∏–∑ –ø–æ–ª–Ω–æ–≥–æ
# ===============================
def get_base_url(url):
    parsed = urlparse(url)
    path = parsed.path
    if "/" in path:
        path = path.rsplit("/", 1)[0] + "/"
    else:
        path = "/"
    base = f"{parsed.scheme}://{parsed.netloc}{path}"
    return base

# ===============================
# üìå –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
# ===============================
def find_secrets(js_code):
    found = set()
    for keyword in SECRET_KEYWORDS:
        # –ò—â–µ–º –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        pattern = re.compile(rf"{keyword}['\"]?\s*[:=]\s*['\"]([^'\"]+)['\"]", re.I)
        for m in pattern.findall(js_code):
            found.add(f"{keyword}: {m}")
    return found

# ===============================
# üìå –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64 –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫ (URL, hex)
# ===============================
def decode_encoded_strings(js_code):
    decoded_strings = set()
    # –ò—â–µ–º base64-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫—Ä–∞—Ç–Ω—ã–µ 4)
    base64_pattern = re.compile(r'([A-Za-z0-9+/=]{8,})')
    for b64 in base64_pattern.findall(js_code):
        try:
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64
            decoded = base64.b64decode(b64).decode('utf-8')
            if len(decoded) > 4:  # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                decoded_strings.add(decoded)
        except Exception:
            pass

    # –ò—â–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    url_encoded_pattern = re.compile(r'%[0-9a-fA-F]{2,}')
    for match in url_encoded_pattern.findall(js_code):
        try:
            decoded = requests.utils.unquote(match)
            decoded_strings.add(decoded)
        except Exception:
            pass

    # –ò—â–µ–º hex-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \x41\x42)
    hex_pattern = re.compile(r'(?:\\x[0-9a-fA-F]{2})+')
    for match in hex_pattern.findall(js_code):
        try:
            hex_str = match.replace("\\x", "")
            bytes_obj = bytes.fromhex(hex_str)
            decoded = bytes_obj.decode('utf-8')
            decoded_strings.add(decoded)
        except Exception:
            pass

    return decoded_strings

# ===============================
# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (HTTP —Å—Ç–∞—Ç—É—Å 200)
# ===============================
def check_endpoint_active(url):
    try:
        resp = requests.head(url, timeout=5, allow_redirects=True)
        if resp.status_code == 200:
            return url
    except Exception:
        pass
    return None

# ===============================
# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
# ===============================
def print_logo():
    logo = r"""
  _____                 _             _       
 / ____|               | |           | |      
| (___   ___  ___ _   _| | ___  _ __ | |_ ___ 
 \___ \ / _ \/ __| | | | |/ _ \| '_ \| __/ __|
 ____) |  __/ (__| |_| | | (_) | | | | |_\__ \
|_____/ \___|\___|\__,_|_|\___/|_| |_|\__|___/
                                              
"""
    print(logo)
    print("SecretLink - JS Endpoint & Secrets Extractor\n")

# ===============================
# üìå –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# ===============================
def prepare_output_dirs(base_dir):
    dirs = {
        "endpoints": os.path.join(base_dir, "endpoints"),
        "active": os.path.join(base_dir, "active"),
        "secrets": os.path.join(base_dir, "secrets"),
    }
    for d in dirs.values():
        os.makedirs(d, exist_ok=True)
    return dirs

# ===============================
# üìå –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ===============================
def main():
    print_logo()

    parser = argparse.ArgumentParser(
        description="SecretLink - Extract JS endpoints and secrets with optional active checking"
    )

    parser.add_argument("-u", "--url", help="–û–¥–∏–Ω URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("-l", "--list", help="–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("-b", "--base", help="–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π")
    parser.add_argument("-a", "--active", action="store_true", help="–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    parser.add_argument("-o", "--output-dir", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–æ–∑–¥–∞—Å—Ç –ø–æ–¥–ø–∞–ø–∫–∏ endpoints/, active/, secrets/)")
    parser.add_argument("-t", "--threads", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)")

    args = parser.parse_args()

    urls = []

    if args.url:
        urls.append(normalize_url(args.url))

    if args.list:
        with open(args.list, "r", encoding="utf-8") as f:
            urls.extend(normalize_url(line.strip()) for line in f if line.strip())

    if not urls:
        parser.error("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã -u –∏–ª–∏ -l")

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω output-dir, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–∞–ø–∫–∏
    if args.output_dir:
        output_dirs = prepare_output_dirs(args.output_dir)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –±–µ–∑ –ø–æ–¥–ø–∞–ø–æ–∫
        output_dirs = {
            "endpoints": ".",
            "active": ".",
            "secrets": "."
        }

    for source in urls:
        print(f"\n[+] –ò–¥—ë—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {source}")
        try:
            js_code = get_js_content(source)

            base_url = args.base
            if not base_url and source.startswith(("http://", "https://")):
                base_url = get_base_url(source)

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
            decoded_strings = decode_encoded_strings(js_code)
            combined_code = js_code + "\n" + "\n".join(decoded_strings)

            endpoints = extract_endpoints(combined_code, base_url)
            secrets = find_secrets(combined_code)

            if endpoints:
                print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:")
                for ep in sorted(endpoints):
                    print(ep)

                with open(os.path.join(output_dirs["endpoints"], "endpoints.txt"), "a", encoding="utf-8") as f:
                    for ep in sorted(endpoints):
                        f.write(ep + "\n")
                print(f"[+] –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {os.path.join(output_dirs['endpoints'], 'endpoints.txt')}")
            else:
                print("[-] –≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            if secrets:
                print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(secrets)} —Å–µ–∫—Ä–µ—Ç–æ–≤:")
                for secret in sorted(secrets):
                    print(secret)

                with open(os.path.join(output_dirs["secrets"], "secrets.txt"), "a", encoding="utf-8") as f:
                    for secret in sorted(secrets):
                        f.write(secret + "\n")
                print(f"[+] –°–µ–∫—Ä–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {os.path.join(output_dirs['secrets'], 'secrets.txt')}")
            else:
                print("[-] –°–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            if args.active and endpoints:
                print(f"[+] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ (–ø–æ—Ç–æ–∫–∏: {args.threads})...")
                active_endpoints = set()
                with ThreadPoolExecutor(max_workers=args.threads) as executor:
                    futures = {executor.submit(check_endpoint_active, ep): ep for ep in endpoints}
                    for future in as_completed(futures):
                        result = future.result()
                        if result:
                            active_endpoints.add(result)

                if active_endpoints:
                    print(f"[+] –ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(active_endpoints)}")
                    with open(os.path.join(output_dirs["active"], "active_endpoints.txt"), "a", encoding="utf-8") as f:
                        for ep in sorted(active_endpoints):
                            f.write(ep + "\n")
                    print(f"[+] –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {os.path.join(output_dirs['active'], 'active_endpoints.txt')}")
                else:
                    print("[-] –ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            print(f"[-] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {source}: {e}")


if __name__ == "__main__":
    main()
